#include "networkmanager.h"
#include <QNetworkReply>
#include <QNetworkRequest>


#include <QDir>
#include <QFile>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>

NetworkManager::NetworkManager(QObject *parent) : QObject(parent)
{
    manager = new QNetworkAccessManager();
    connect(manager,SIGNAL(finished(QNetworkReply*)), this, SLOT(myReplyFinished(QNetworkReply*)));
}

void NetworkManager::loadWebPage(){
    QNetworkRequest request;

    QString apiKey = "H73X7AEFBZRJU1SU";
    QString urlString = QString("https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_INTRADAY&symbol=BTC&market=RUB&apikey=%0").arg(apiKey);

    QUrl url(urlString);

    request.setUrl(url);

    QNetworkReply *reply = manager->get(request);

}

//
void NetworkManager::myReplyFinished(QNetworkReply*reply)
{
    QByteArray webData = reply->readAll();
    
    // Save data to the file:
    QFile *file = new QFile(QDir::currentPath() + "\\BitcoinPrice.txt");
    if(file->open(QFile::Append))
    {
      file->write(webData);
      file->flush();
      file->close();
    }
    delete file;

    QList<QPair<QString,QString>> graphRub;
    QList<QPair<QString,QString>> graphUSD;
    
    //QString webDataString = QString(webData);
    
    QJsonDocument document = QJsonDocument::fromJson(webData);

    if(document.isArray() == true){
        //retreive the array
        QJsonArray rootArray = document.array();
    }

    else if(document.isObject() == true)
    {

        QJsonObject rootObject = document.object();

        QJsonObject timeSeries = rootObject["Intraday Prices and Volumes for Digital Currency)"].toObject();
        QStringList keys = timeSeries.keys();
        for (QString k : keys){
            QJsonObject minValues = timeSeries[k].toObject();
            QString rubValue =  minValues["1a. price (RUB)"].toString();
            QString usdValue =  minValues["1b. price (USD)"].toString();
            QPair<QString,QString> dataItem;
            dataItem.first = k;
            dataItem.second = rubValue;
        
            QPair<QString,QString> dataItem1;
            dataItem1.first = k;
            dataItem1.second = usdValue;
            
            graphRub.append(dataItem);
            graphUsd.append(dataItem1);
            
        }

/*
        QStringList keys = rootObject.keys();
        for (QString k : keys){


            if(rootObject[k].isObject() == true){
                QJsonObject object = rootObject[k].toObject();

                for (QString childkey : object.keys()){
                    qDebug() << childkey;
                }
            }
        }
*/
    }

    for (int i=0; i<graphRub.size(); i++){
        QPair<QString,QString> data = graphRub[i];
        QTime xAxisParam;
        xAxisParam.setHMS(QTime::fromString(data.first,"HH:MM:SS"));
        xAxisParam.fromMSecsSinceStartOfDay();
        float list = data.second.toFloat();
        emit valueUpdated(QVariant(xAxisParam),QVariant(list));
    }
    for (int i=0; i<graphUSD.size(); i++){
        QPair<QString,QString> data = graphUSD[i];
        QTime xAxisParam;
        xAxisParam.setHMS(QTime::fromString(data.first,"HH:MM:SS"));
        xAxisParam.fromMSecsSinceStartOfDay();
        float list = data.second.toFloat();
        emit valueUpdated1(QVariant(xAxisParam),QVariant(list));
    }


    //qDebug()<<webDataString;
}
